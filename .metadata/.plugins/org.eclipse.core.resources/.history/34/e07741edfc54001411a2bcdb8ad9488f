package com.pracownia2;

import static org.junit.Assert.*;

import org.junit.Test;



public class WzorDwumianowyTest {

	@Test
	public void zwracaSumeDlaJednostkowejPotegi()
	{
		assertEquals("a + b", WzorDwumianowy.oblicz("a+b", 1));
		assertEquals("pierwszy + drugi", WzorDwumianowy.oblicz("pierwszy+drugi", 1));
	}
	
	@Test
	public void zwracaRozniceGdyDrugiIdentyfikatorJestUjemny()
	{
		assertEquals("a - b", WzorDwumianowy.oblicz("a-b", 1));
		
	}
	
	@Test
	public void zwracaJedenGdyPotegaJestZerowa()
	{
		assertEquals("1", WzorDwumianowy.oblicz("a+b", 0));
		
	}
	
	@Rule
	public ExpectedException exception = ExpectedException.none();
	@Test
	public void wyrzucaWyjatekGdyBrakDozwolonegoOperatora()
	{
		exception.expect(IllegalArgumentException.class);
		WzorDwumianowy.oblicz("a*b", 1);	
	}
	
	@Test
	public void wyrzucaWyjatekGdyBrakDozwolonegoOperatoraAPotegaJestZero()
	{
		exception.expect(IllegalArgumentException.class);
		WzorDwumianowy.oblicz("a*b", 0);
	}
	
	@Test
	public void wyrzucaWyjatekGdyBrakLewegoIdentyfikatora()
	{
		exception.expect(IllegalArgumentException.class);
		WzorDwumianowy.oblicz("+b", 0);
	}
	
	@Test
	public void wyrzucaWyjatekGdyBrakPrawegoIdentyfikatora()
	{
		exception.expect(IllegalArgumentException.class);
		WzorDwumianowy.oblicz("a+", 0);
	}
	
	@Test
	public void wyrzucaWyjatekGdyLewyOperatorJestUjemny()
	{
		exception.expect(IllegalArgumentException.class);
		WzorDwumianowy.oblicz("-a+b", 0);
	}
	
	@Test
	public void wyrzucaWyjatekGdyPotegaJestWiekszaOdMaxa()
	{
		exception.expect(IllegalArgumentException.class);
		WzorDwumianowy.oblicz("a+b", 67);
	}
	
	@Test
	public void wyrzucaWyjatekGdyPotegaJestMniejszaOdZera()
	{
		exception.expect(IllegalArgumentException.class);
		WzorDwumianowy.oblicz("a+b", -1);
	}
	
	@Test
	public void usuwaZbedneBialeZnaki()
	{
		assertEquals("a - b", WzorDwumianowy.oblicz("   a   -   	      b", 1));
	}/home/jenda/Documents/Programming/uwr_java
	
	@Test
	public void zwracaRozwienietaPotegePiatki()
	{
		assertEquals("s^5 + 5*s^4*t + 10*s^3*t^2 + 10*s^2*t^3 + 5*s*t^4 + t^5", WzorDwumianowy.oblicz("s+t", 5));
	}
	
	@Test
	public void zwracaRozwienietaPotegePiatkiZOperatoremOdejmowania()
	{
		assertEquals("s^5 - 5*s^4*t + 10*s^3*t^2 - 10*s^2*t^3 + 5*s*t^4 - t^5", WzorDwumianowy.oblicz("s-t", 5));
	}
	
	@Test
	public void zwracaRozwienietaPotegeTrzydziestkiZOperatoremOdejmowania()
	{
		assertEquals("s^30 - 30*s^29*t + 435*s^28*t^2 - 4060*s^27*t^3 + "
				+ "27405*s^26*t^4 - 142506*s^25*t^5 + 593775*s^24*t^6 - "
				+ "2035800*s^23*t^7 + 5852925*s^22*t^8 - 14307150*s^21*t^9 + "
				+ "30045015*s^20*t^10 - 54627300*s^19*t^11 + 86493225*s^18*t^12 - "
				+ "119759850*s^17*t^13 + 145422675*s^16*t^14 - 155117520*s^15*t^15 + "
				+ "145422675*s^14*t^16 - 119759850*s^13*t^17 + 86493225*s^12*t^18 - "
				+ "54627300*s^11*t^19 + 30045015*s^10*t^20 - 14307150*s^9*t^21 + "
				+ "5852925*s^8*t^22 - 2035800*s^7*t^23 + 593775*s^6*t^24 - 142506*s^5*t^25 + "
				+ "27405*s^4*t^26 - 4060*s^3*t^27 + 435*s^2*t^28 - 30*s*t^29 + t^30", WzorDwumianowy.oblicz("s-t", 30));
	}
	
}

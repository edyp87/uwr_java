package com.pracownia2;

import static org.junit.Assert.assertEquals;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class WzorDwumianowyTest {

	@Test
	public void zwracaSumeDlaJednostkowejPotegi()
	{
		assertEquals("a + b", WzorDwumianowy.oblicz("a+b", 1));
		assertEquals("pierwszy + drugi", WzorDwumianowy.oblicz("pierwszy+drugi", 1));
	}
	
	@Test
	public void zwracaRozniceGdyDrugiIdentyfikatorJestUjemny()
	{
		assertEquals("a - b", WzorDwumianowy.oblicz("a-b", 1));
		
	}
	
	@Test
	public void zwracaJedenGdyPotegaJestZerowa()
	{
		assertEquals("1", WzorDwumianowy.oblicz("a+b", 0));
		
	}
	
	@Rule
	public ExpectedException exception = ExpectedException.none();
	@Test
	public void wyrzucaWyjatekGdyBrakDozwolonegoOperatora()
	{
		exception.expect(IllegalArgumentException.class);
		WzorDwumianowy.oblicz("a*b", 1);	
	}
	
	@Test
	public void wyrzucaWyjatekGdyBrakDozwolonegoOperatoraAPotegaJestZero()
	{
		exception.expect(IllegalArgumentException.class);
		WzorDwumianowy.oblicz("a*b", 0);
	}
	
	@Test
	public void wyrzucaWyjatekGdyBrakLewegoIdentyfikatora()
	{
		exception.expect(IllegalArgumentException.class);
		WzorDwumianowy.oblicz("+b", 0);
	}
	
	@Test
	public void wyrzucaWyjatekGdyBrakPrawegoIdentyfikatora()
	{
		exception.expect(IllegalArgumentException.class);
		WzorDwumianowy.oblicz("a+", 0);
	}
	
	@Test
	public void usuwaZbedneBialeZnaki()
	{
		assertEquals("a - b", WzorDwumianowy.oblicz("a-         b", 1));
	}
	
	
}
